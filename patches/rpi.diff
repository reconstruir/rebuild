diff --git a/lib/rebuild/base/build_target.py b/lib/rebuild/base/build_target.py
index 6afbb1b..6cbde0c 100644
--- a/lib/rebuild/base/build_target.py
+++ b/lib/rebuild/base/build_target.py
@@ -16,6 +16,7 @@ class build_target(namedtuple('build_target', 'system, distro, level, archs, bui
   DEFAULT = 'default'
 
   def __new__(clazz, system = DEFAULT, level = DEFAULT, archs = DEFAULT, distro = None):
+    assert distro
     system = build_system.parse_system(system)
     level = clazz._determine_level(level)
     distro = clazz._determine_distro(system, distro)
@@ -101,6 +102,12 @@ class build_target(namedtuple('build_target', 'system, distro, level, archs, bui
     }
     dict_util.quote_strings(constants)
     exp_with_consts = string_util.replace(exp_with_vars, constants, word_boundary = True)
+    print('FOO:1      expression: %s' % (str(expression)))
+    print('FOO:2       variables: %s' % (str(variables)))
+    print('FOO:3   exp_with_vars: %s' % (str(exp_with_vars)))
+    print('FOO:4       constants: %s' % (str(constants)))
+    print('FOO:5 exp_with_consts: %s' % (str(exp_with_consts)))
+    print('FOO:6          result: %s' % (eval(exp_with_consts)))
     return eval(exp_with_consts)
 
   @classmethod
@@ -120,6 +127,6 @@ class build_target(namedtuple('build_target', 'system, distro, level, archs, bui
 
   @classmethod
   def make_host_build_target(clazz, level = build_level.RELEASE):
-    return clazz(system = host.SYSTEM, level = level)
+    return clazz(system = host.SYSTEM, level = level, distro = host.DISTRO)
   
 check.register_class(build_target)
diff --git a/lib/rebuild/builder/builder_cli.py b/lib/rebuild/builder/builder_cli.py
index 0172dad..b580ade 100644
--- a/lib/rebuild/builder/builder_cli.py
+++ b/lib/rebuild/builder/builder_cli.py
@@ -39,6 +39,7 @@ class builder_cli(object):
     self.parser.add_argument('-s', '--system', action = 'store', type = str, default = build_target.DEFAULT, help = 'build_system.  One of (%s) [ %s ]' % (systems, build_system.DEFAULT))
     self.parser.add_argument('-a', '--archs', action = 'store', type = str, default = build_target.DEFAULT, help = 'Architectures to build for.  One of (%s) [ %s ]' % (all_archs, default_archs))
     self.parser.add_argument('-l', '--level', action = 'store', type = str, default = build_target.DEFAULT, help = 'Build level.  One of (%s) [ %s ]' % (build_levels, build_level.DEFAULT_LEVEL))
+    self.parser.add_argument('--distro', action = 'store', type = str, default = build_target.DEFAULT, help = 'Distro.  One of (%s) [ %s ]' % ('FIXME', 'FIXME2'))
     self.parser.add_argument('--skip-to-step', action = 'store', type = str, help = 'Skip to the given step name. [ None ]')
     self.parser.add_argument('--deps-only', action = 'store_true', help = 'Only build dependencies')
     self.parser.add_argument('--recipes-only', action = 'store_true', help = 'Only read the recipes dont build them.')
@@ -90,7 +91,7 @@ class builder_cli(object):
     build_blurb.set_process_name('rebuild')
     build_blurb.set_verbose(args.verbose)
 
-    bt = build_target(system = args.system, level = args.level, archs = args.archs)
+    bt = build_target(system = args.system, level = args.level, archs = args.archs, distro = args.distro)
     
     # Tests only run on desktop
     if not bt.is_desktop():
diff --git a/lib/rebuild/builder/builder_config.py b/lib/rebuild/builder/builder_config.py
index 2b44431..c03af75 100644
--- a/lib/rebuild/builder/builder_config.py
+++ b/lib/rebuild/builder/builder_config.py
@@ -15,10 +15,12 @@ class builder_config(object):
   
   def __init__(self):
     self._build_root = None
-    self.build_target = build_target()
+#    self.build_target = build_target()
+    self.build_target = None
     self.host_build_target = build_target(system = build_system.HOST,
                                           level = build_level.RELEASE,
-                                          archs = build_arch.DEFAULT_HOST_ARCHS)
+                                          archs = build_arch.DEFAULT_HOST_ARCHS,
+                                          distro = 'default')
     self.root_dir = None
     self.deps_only = False
     self.recipes_only = False
diff --git a/lib/rebuild/builder/builder_script.py b/lib/rebuild/builder/builder_script.py
index 0beea7a..a02cb99 100644
--- a/lib/rebuild/builder/builder_script.py
+++ b/lib/rebuild/builder/builder_script.py
@@ -27,6 +27,7 @@ class builder_script(object):
     self.recipe = recipe
     self.build_target = build_target
     self.enabled = self.build_target.parse_expression(recipe.enabled)
+    print('FOO: name=%s; enabled=%s' % (self.descriptor.name, self.enabled))
     self.recipe_dir = path.dirname(self.filename)
     self._step_manager = step_manager('rebuild')
     self.working_dir = self._make_working_dir(self.env.config.builds_dir(self.build_target),
diff --git a/lib/rebuild/builder/steps/step_cleanup_linux_fix_rpath.py b/lib/rebuild/builder/steps/step_cleanup_linux_fix_rpath.py
index 482637f..35fd0b9 100644
--- a/lib/rebuild/builder/steps/step_cleanup_linux_fix_rpath.py
+++ b/lib/rebuild/builder/steps/step_cleanup_linux_fix_rpath.py
@@ -20,6 +20,7 @@ class step_cleanup_linux_fix_rpath(step):
   
   #@abstractmethod
   def execute(self, script, env, values, inputs):
+    return self.result(True, None)
     if not script.build_target.is_linux():
       return self.result(True, None)
     if not path.isdir(script.staged_files_dir):
diff --git a/lib/rebuild/tools_manager/tools_package_manager.py b/lib/rebuild/tools_manager/tools_package_manager.py
index 982af84..c14fa69 100644
--- a/lib/rebuild/tools_manager/tools_package_manager.py
+++ b/lib/rebuild/tools_manager/tools_package_manager.py
@@ -15,7 +15,7 @@ from rebuild.package import artifact_manager, package
 
 class tools_package_manager(object):
 
-  BUILD_TARGET = build_target(host.SYSTEM, build_level.RELEASE)
+  BUILD_TARGET = build_target.make_host_build_target()
 
   def __init__(self, root_dir):
     self.root_dir = root_dir
