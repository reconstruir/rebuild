

Use "reb" namespace for build

Add xcrun find support to use the right compilers on darwin
Add c++ dialect support

Write a test android app
Write a test ios app

Dec 8

Dec 16
when specifying tools or dependencies, allow for just giving the name as a way for the system to use the latest and greatest one

cleanup mess in blurb and add way to unit test

dec 19
- formalize the hackery of *-config scripts a bit similar to
  pkg-config
- deal with python packages clobbering each others easy-install.pth
  and such
- change all_bin_dir in ToolPackageManager to be unix_path or such

dec 24
- move the top level artifactory manager inside rebbe.

jan 1
- finish moving checksuming to BuildScript

jan 2
- add __load_package() persistent cache for ArtifactManager
- Rebbe.update_packages() needs options for machine and arch and
  build_level


Command to test rebbe package installation:
rebbe.py packages install -a tmp/artifacts /tmp/p poto python_libarchive libpng

jan 3:
  centralize the code to find builtin tools from PkgConfig.py
  fix issue in software/lib/libtiff/build.py that requires --disable-cxx
- event though the PkgConfig module has its own pkg-config binary, when a software package needs pkg-config it still needs to be added to the tools
- improve TarArchive.extract() performance by using extractall
with the members argument.  Same for ZipArchive

jan 4
- fix the way these bootstrap tools get added using package management
- test that 'env' works for the step_make step
- maybe rename configure_env and configure_flags to env and flags ???

jan 6
- patches should be indexed by system

jan 8
- fix emacs in console mode to not use desktop mode
- deal with cut-n-paste nature of python build steps

jan 12
- make sure no unit test code executes in regular run
- add paralelization support.  make build order return deps in chunks that can be parallelized

jan 14
- print decent error when a dependency is disabled

jan 19
- rebbe.py packages install -a ~/software/tmp/artifacts /tmp/v v python_virtualenv fails because of a missing dir
- add more unit tests

jan 25
- consistent name for platform specific eggs.  macosx vs. darwin --plat-name= seems to be broken for bdist (not bdist_egg)
rebbe.py packages install -a ~/software/tmp/artifacts ~/.tools re python_pythoscope scons cmake pkg_config uncrustify 
- throw errors when a tool is used as a dep and also when a dep is used as a tool
- when installing a package throws an error, the installation is left in an inconsistent state.  should cleanup the mess

jan 27
- make sure all patches are named consistently
- context might be better named environment
- make the tmp_dir for testing be in the same place as unpacked, deps, etc
- move the LD_LIBRARY_PATH hackery in PackageManager.__make_script() to a decent location
- in __run_cpp_test() abstract the compiler name hardcoded to gcc now
- os_env.CLEAN_ENV_VARS might have to be system specific
- deal with the ugliness of BuildScript.all_scripts and BuildScript.checksum_dir

feb 5
- license in hdradio is apache
- investigate why ~/.bes/fs/cached_read/files/var/folders/g1/lkq6h5vj4hn5q32f1drxx_xh0000gn/T/nosetests-* keeps growing

feb 6
- add unit tests for FileSearch.py
- make sure all build recipes are as simple, complete and right order (missing cleanup very common)
- get rid of the @FOO@ repalcements hacks and just use variables
- automate license collection
- make sure test_data dirs are in the right place
- add repeat to unit tests
- aclocal fucked.  need to fix the code that fixes prefixes in installed packages to do any shell scripts in bin/
- rename step_check_hard_coded_paths to step_fix_hard_coded_paths
- make sure all c++ libs have a test like libpng


feb 6.5
- write a command builder class that helps build complicated commands such as the easy install ones
- get rid of StepManager 'name'
- perhaps move previous_step_output to be an argument to execute()
- move cpp and python tests out of step_test_artifact_lib to hooks or checks
- rename step_setup_install_deps to step_setup_deps_install
- move StepResult and StepDescription into Step

feb 7 
- rename 'env' from step_shell.py to 'shell_env' and across the board

feb 8
- debug and release flags are not really properly managed
- get rid of all the .pc file links and use the renaming scheme
- any --with-png type of configure flag should be --with-png=$REBUILD_REQUIREMENTS_DIR
- rename libbzip2 back to bzip2
- use ${REB} variable renaming for pc files instead of the custom replacement hack in Package.py
- fix cython, scons build.py for pythonness
- rename libpciaccess to pciaccess
- rename libexpat to expat plus any build.py that sets pkg_config_name and is fishy
- rename libopenjpeg to libopenjp2 ???

feb 10
- unify step_cleanup_binary_filenames.py and step_cleanup_library_filenames.py since
they are essentially the same thing

feb 11
- maybe figger out if scons needs setuptools
- add check that the source dir was not hacked
- get jpeg2000 for opencv

feb 13
- add a post_setup_hook and use it for python_game, opencv setup and download hacks
- when the patch for leptonica changed, it did not rebuild
- fix the screwy patch for ffmpeg

feb 17
- when an argument to ~/software/build.py has a typo shit happens
- let dashes work in package names and versions cmon
- add error for missing download url

alias go='bes_refactor.py unit -l 1 ~/projects/lib/bes'
alias go_cleanup='bes_refactor.py unit_cleanup ~/projects/lib/bes'
alias go_test='bes_test.py ~/projects/lib/bes'

rebbe.py packages install -a ~/software/tmp/artifacts ~/.retools global python_pyserial
rebbe.py packages update -a ~/software/tmp/artifacts ~/.retools/

feb 18
- checks for python eggs and libs should be added automatically only some python projects doing it
- add unit test for common_base when the archive has a member that is a single dot
- Rebbe.py:update_packages needs options for system and arch: see FIXME

feb 21
- PYTHONPATH ends up with too many packages.  some dont have python libs
- make hooks be more generic

feb 22
- write a check that makes sure no binary or shared libraries exist
- cross process locking when building on separate terminals

feb 23
- ac_cv_prog_AWK=/usr/bin/awk  for all programs
- need some kind of hash of tool binaries (like cmake) against its package when updating tools cause of changes that did not rev a revision or version

feb 24
- reorganize ~/.retools kind of dirs by system
- cccache support
- retire Patch.depth() crap
- vorbis and such for libsdl1_mixer

feb 28
- step_test_artifact_lib.py: FIXME: static is hardcoded here (depends on global static mode)
- major inconsistensy in the way replacements happen for synthetic pkg-config pc files.  step_pkg_config_make_pc.py and Package.py.  Need to centralize that chit

feb 29
- fix wget ssl cert bundle issue
- Package.py is using a weird replacements strategy
- add concept of test package for tests above
- in ~/software/build.py rename users to dependents
- figure out if freetype really needs bzip2

mar 2
- add some kind of warning when libxrender-dev is missing when compiling kivy.  some kind of check for system dev tools inclyding compilers and such

mar 4
- ar and ar flags for ffmpeg
- make sure theres an GPL free option for ffmpeg
- ffmpeg deps is fuxxered
- fix the needs to specify ar and ar flags for tools in hacky ways
- add build.py for gnu_findutils and gnu_patch

mar 13
- # FIXME: theres more gettext programs in its bin/ that might need to be added here (lib/gettext/build.py)
- fixgure out why ncurses makes ARFLAGS be 'r unknown' and remove hack from bes_ar.py to deal with "unknown"

mar 14
- cleanup huge mess in BuildScript.py

mar 19
- changing build.py opts (-o flag) doesnt rebuild a project


jun 15
- find a better way to set the lipo_exe that having all Lipo.py and DarwinPackageUtil.py
  functions accept it
  
jun 17
- when doing "gc foo.c" need to touch foo.c if it does not exist

dec 9
fix the issue with tools path having arch crap

jan 9
when i changed the archs c++ projects didnt rebuild so we need to hash the flags and use that for the cache like scons does.

jan 16
- add way to filter enabled packages by platform
- fix issue where cmake doesnt use the system libs
- rename pc_files to be pkg_config_files
- fix dependencies so when a build.py with multiple projects gets touched it doesnt affect the projects that didnt change.
  so the hash should be not the filename but the python code that describes a project

jan 17
- change System.DARWIN to System.APPLE
- make sure disabled packages dont affect dependency tree
- add notion of unsupported per system along side disabled

jan 19
- add xz support for tar
- fix flags names shell_env in step_python_egg
- add better aliases for ${REBUILD_REQUIREMENTS_DIR}/include ${REBUILD_REQUIREMENTS_DIR}/lib
- maybe add --datarootdir=${REBUILD_REQUIREMENTS_SHARE_DIR} to all autoconf invocations
- add 'PERL5LIB': '${REBUILD_REQUIREMENTS_DIR}/lib/x86_64-linux-gnu/perl/5.22' to Step.py
- argument.env class is Context should be some kind of BuildEnv thing
- theres a lot of cut-n-paste in PackageTestser between python ahd shell tests
- need to standardize CFLAGS and LDFLAGS and have a one shot way to set them
- fix step_make_caca and step_make
- check deps for recursion mistakes like when a lib depends on itself
- bzip2 should be libbzip2


jan 20
static vs shared issue: PKG_CONFIG='pkg-config --static' in Step.py
[ '--enable-static', '--disable-shared' ] flags all over makefiles

jan 21
- step_make_install has a autoconf prefix argument that doesnt belong

jan 22
- factor out variable substitition code ouf step

the notion of a prefix is hardcoded for step_make and step_make_install

deal with the out of the box situation on macs where "sudo xcodebuild -license" is needed before a package will build
and also have a smoke test of the xcode command line tools being installed with instructions if failed


export_compilation_flags_requirements should not be a property of the package but of the build

add the current package name to the beginning of build blurb spew

fix need for this in build.py files .  add aliases
        'CFLAGS': '-I${REBUILD_REQUIREMENTS_DIR}/include ${REBUILD_COMPILE_CFLAGS}',
        'LDFLAGS': '-L${REBUILD_REQUIREMENTS_DIR}/lib',

archive_util -> ArchiveUtil

retire FileUtil.is_exe() and use binary detector instead

feb 2
- split EnvVar into the parts that hack the live environment and utils - also SystemEnvironment is confusing too.
- make sure env var updates call unique

feb 3
- Step.py:#FIXME: unify the replacements here with those in step_pkg_config_make_pc.py

PkgConfig.py:
# FIXME: maybe this should be centralized
  def __pkg_config_exe():

support for packages such as glib that provide multiple .pc files

automate the import of steps

feb 6
- need much tighter control of what goes in the package metadata and no magic numbers
g
feb 7
- control-c during a tester run results in a corrupted package installation

package tester deps for some reason exe does not get rebuilt if comand is the same

add notion of runtime_tools and compile_tools


feb 13
move SystemEnvironment to a more shared place

feb 14
make archive abstract class be good also matcherbase

feb 22
get rid of the builtin pkg-config and instead when writing a package install its flags at package time



feb 24
- change SHell.execute to process.run or whatever

mar 3
- the resolution of dicts in Step should be a key value list not a dict
- reverse order of ctor arts for CompileFlags to match build_target
- ncurses build.py has lots of cut n paste
- xz build.py has some screwy names using the word "caca"
- change shell = True to shell = False in step.call_shell

mar 7
- libspotify build.py is not working the enabled hack

return sdl1 crap

mar 9
- rewrite requirement as a state machine
- BuildScriptEnv DISTRO maybe should be part of build_target somehow
- PackageInfo.ParsedDep -> requirement
- when building in static mode - check binaries to make sure they dont link to anything other than system libs dynamically to catch libz libxml etc that might be part of the system

- PackageInfo -> PackageDescriptor

mar 12
- file cache never expires

mar 13
- fix the notion of build_target in PackageManager seems fucked up



CACA:
theres no filtering of requirements in BuildScript.py used to be in __load_requirements()
theres some weirdness about None system_mask in requirement
step_setup_install_deps -> step_setup_install_requirements

requirements dont take into account operators

need better example projects that zlib and libpng

mar 14
unit_test: data_path -> unit_test_data_file or something

mar 17
mv bes/hardware somewhere better

get rid of export_compilation_flags_requirements


mar 18
- the notion of tools depending on non tools is a bit weird.  see builder_script_runner.__init__
- unify dependency code in builder_script_runner and PackageManager

mar 19
- all python projects should automagically have set 'copy_source_to_build_dir': True,
- make python egg steps copy_source_to_build_dir automafically
- there should be a global way to set 'copy_source_to_build_dir': True, for python eggs
- fix ncurses build to use delete files directive instead of hook

mar 21
- steps should accept standard pythons args like *args, and **kargs
- step logging setup is fucked up
- populate ~/third-party-sources/
- s / package_managers  / requirement_managers in rebuild_tool
- remanager.py:_command_test() fix opts parsing issue and test it make sure it works

old attic notes:
ffmpeg configure_flags='--disable-securetransport'


mar 25
get rid of scons stuff in rebuild and move it elsewhere

mar 28
- refactor ~/software into projects

mar 30
- write rebuilder_ar.py script tests

apr 4
- add unit test for a build script with multiple recipes

apr 13
- package_manager notion of build_target is inconsistent.  install needs it uninstall doesnt
- bes_refactor.py needs to remove empty dirs when done
- get rid of uppercase in mirror cause it makes refactor hard

apr 18
- write my own topological sort

may 31
- install a clean mac and have warnings for missing xcode and tools

jul 18
- bes_archive_tool.py imports from rebuild

jul 19
- figure out why os.link() does not work on macos sierra for rebuild.sync

jul 23
- s/requirements/runtime_requriments or so

jul 23
- split todo files by project
- figure out why bes_test.py always makes .pyc droppings

jul 25
- bes_refactor rename of files does not git add new files

aug 11
- kivy build.py macos: deps broken they show up on linux
- writing ~/.rebuild/update.sh users /users/ instead of ~/

aug 19
- do a clean ubuntu 16 install to do a kivy build to have the build tell what rpms it needs and have a way to specify these in the build recipes

oct 3
- when a package changes names like python_beautiful_soup to python_beautifulsoup it creates conflicts need to remove the old one
- add post_install and post_setup hoook unit tests
- add file_replace unit tests

oct 13
figute out the goofy test_fat_archive __make_test_archive that returns a tgz where it looks like a .a is expected.

oct 17
- remove the need for builder_script to have all_scripts
- in builder_config rename users to dependents or somesuch
- better errors when source not found
- move dep sources out of builder_script.py into its own

oct 18
- only tools appears to be broken in builder_cli.  need to fix dependencies for that case

oct 23
- add unit test of downloading from git
- add unit test of source finder

oct 24 
- add unit tests of rebuilder no_checksums
- fix Package._load_metadata() to use a better cache dir
- some unit test is crapping in ~/.rebbe for checksum chit
- add cmake rebuild unit test
- add a progress meter or feedback to third party sources downloader
- change DEFAULT_THIRD_PARTY_PREFIX = 'rebbe_' to 'rebuild_' in builder_config.py and test
- add unit test that patches
- add unit test with all kinds of hoooks and checks

oct 25
- improve builder_env - add defaults notion at __getitem__ to check for invalid entries etc.  add check that values are valid etc
- python errors in build.py files are impossible to debug

- figure out if builder.exclude() is really needed
- add a timing stats cache per project and use it for a progress bar

oct26
- this shit in a build.py script is impossible to debug
''' step_setup_patch, { 'patches': [ 'libpng-zlib.patch' ] } '''

oct 31
- not sure System.IOS_SIM is needd might be better to get rid and just use arch

nov 2
- find out why ~/.rebbe comes to exists when running unit tests
- check that scripts in env dir of package manager installation dont clobber each other
- rerite archive_util.find() to be more sane in its pattern matching
- extra tarball mess needs to deal with version
- android platform tools are not versioned
- had to hack bes_test.py to pass through REBUILD_ env variables

nov 3
- filenames duplicated in builder_env and builder __init__
- env duplicated in builder __init__ as well as builder.build_script()
- move the binary_object test files to a common place
- add a extra_code unit test in test_hook.py

nov 4
- step_check_hard_coded_paths should be step_fix_hard_coded_paths
- package.info -> package.desc
- move test_data up one level
- fix fact that rebuild.builder/__init__.py imports the world

nov 5
- pc_file_variables should use the masked config resolve strategy
- more tarball finder tests with platform speific tarballs that match and miss different platforms
- get rid of builder_script.env
- deal with dup classes in step_registry
- fix remove checksums to be script based cause of build_target change

nov 6
- verify that compilation follows opt and debug flags

nov 8
- add support for build variables in command line

nov 14
- test_builder_script.py and test_builder_script_execute.py are broken
- replace build_level with an enum

nov 15
- test case when tool depends on lib
- builder_script_manager._load_scripts() tool vs not recipes mess

nov 23
- consider using yaml for recipe parsing

nov 30
- use class registry and parsing scheme for hooks and checks
- REBUILD_PACKAGE_FULL_VERSION insconsisent maybe should be REBUILDER_PACKAGE_VERSION
- write unit tests for features used in
  proj/third_party/python/python_setuptools/build.py
  python/python_pillow/reb-python_pillow-test.py
  lib/libpng/reb-libpng-test-process.c

dec 7
- make sure all steps define argspec.  make it abstract.  change step_registry 'registree.argspec() or {}' to just registree.argspec()
- fix symlinks in /Users/ramiro/proj/rebuild/lib/rebuild/test_data/rebuilder/fructose

dec 8
- step_check_hard_coded_paths maybe needs to be in a uber step check step same with step_check_darwin_archs

dec 19
- value_definition check does not work with lower case

dec 21
- fix enabled parsing for build.py<python_pyspotify>
- add a unit test of pc_files and pc_file_variables

jan 9
- rename step_make_instructions to step_instructions_write or something
- need a unit test of writing instructions when a build script has them

jan 10
- finish refactoring rebuild.value from rebuild.recipe
- fix instructions to be system specific masked

- add a rebuild_ldd unit test
- sort out the test data bs

jan 13
- fix checksum_manager._checksum_dir: check.check(level, build_target, 'build_target') either level is misnamed or
  the type is wrong

jan 14
- git code will download even if --no-network is given
- change test_mirror_script to be new style
- bes_network test_data paths

jan 21
- from step.py # FIXME: unify the replacements here with those in step_pkg_config_make_pc.py

jan 25
- bes.dependency.dependency_resolver.missing_dependency_error: Missing dependency for python/python_kivy/build.py: python_pkg_resources
if python_kivy depends on python_pillow and pillow depents pn pkg_resources and pkg_resources is retired the error doesnt say
why the dependency is missing

some python packages depend on setuptools at runtime because of pkg_resources.  python3 has that builtin so need a variable way to do this dependency onpyt for python2

cleanup the shit that happens in ~/.rebuild/dev_tools/setup.sh to cleanup things like PKG_CONFIG_PATH.  also figure out a way to version these files so they update if the template changes

Feb 13
 - cleanup shit in build: Downloading git@git:rebuild.git@181b29f to /Users/ramiro/proj/third_party/BUILD/downloads/git@git_rebuild.git/181b29f.tar.gz


feb 17
- figure out why the build.py in gnu_flex needs to have M4=m4 instead of using rebbe_m4.  maybe its missing env vars

feb 22
- need to cleanup old downloads same as old builds

feb 28
- write unit test for package manager for different combinations of requirements and build_tool_requirements where they depend on each other

feb 29
- when a compound step fails it spews the compound step name not the name of the leaf step that actually failed

mar 3
- had to do git mv libedit-20170329-3.1.tar.gz libedit-20170329.3.1.tar.gz because tarball finder is dumb

TMPDIR did not work for some tests in third_party/.  standardize it and make suer the env var is set for all tests

mar 11
 - build netifaces with our own python
 - add test for pyinstaller that proves it wokrs.  it doesnt when python.h is missng
 
mar 14
 - figure out why rebuild.recipe in python_chardet does not deal with tests
 - checksums might be fucked
 - add tools to checksums
 
mar 16
 - need to add a mechanism for appending to environtment stuff like CFLAGS

mar 17
 - install files step majorly fucked

mar 18
 - split build_sytem into build_os and build_os_mask
 - reorg value_type, masked_value and recipe_parser_util into a coherent class hierarchy for values
 
mar 19
 - figure out a way to add android ndk tool to all deps when building for android so dont have to use the one in ~/.rebuild/
 - when resolving values use a standard list with overritten methods for get that set defaults correctly

mar 20
- test_package_manager.py might be recreating the test artifact manager over and over
- package_manager doesn do anything about satisfying version or revision in _missing_requirements() and in general
- requirement_manager has a lot of cut-n-paste code in the resolve_ methods
- theres no unit test for export_compilation_flags_requirements and also not one where its system masked
- package_manager.install_tarball() needs an argument telling it if want run or build or both packages

mar 22
- builder.wipe_build_dirs() doesnt deal with the host build target issue when building tool deps same with no checksums need to do resolutions before
- depends_on is broken in builder
- prune the scripts tree to avoid crawing and downloading shit that is irrelevant

builder_script.py you suck so bad because file not found: %s' % (s))

mar 23
- unit tests for package_manager with different hadnessess
- make the hardness masks lowercase all over

mar 27
- retire in rebuild/package/package_db_entry.py key = 'info'
- rebuilder.py -w will kill stuff like -n but it shouldnt

install_target should be make_install_target
when the name of the makefile changes from build.py to rebuild.recipe it doesnt recompile checkout checksums

figure out the check_python_eggs mess

step_autoconf:
instead of:
  configure_script  string      configure
shoule be:
  configure_script  file      configure
but its broken  


this didnt work
linux: CFLAGS=-std\=c99
had to do
linux: CFLAGS="-std=c99"

step_python_egg update_version_tag should be a file type instead of string
step_make accepts shell_env

march 30
- factor out revision again
- missing env_files unit tests
- missing unit test for a lot of args
- make steps be pluggins

jan 15
- remove disabled packages from all_scripts instead of just skipping them but first check nothing depends on it

apr 2
 - package.create_package() does some weird shit with properties (export_compilation_flags_requirements)
  
apr 3
need a package unit test with symlinks


rebuild.recipe<libstarch>
broken:
  macos: CC=clang CFLAGS=${REBUILD_COMPILE_ARCH_FLAGS}
works:  macos: CC=clang CFLAGS="${REBUILD_COMPILE_ARCH_FLAGS}"

april 4
- remanager.py test unit test
- need to check for env_dir files conflicts

env_var fucking

april 5
- retire v1 format from package_db_entry
- env files and metadata dont come into checksum computation


s/step_extract_tarballs_to_stage_dir/step_extract_tarballs_to_staged_files_dir

maybe use tar to extract tarballs
maybe use hardlink when staging the tarball to prevent copying so much and disk space

uninstall a package with an egg might leave a fucked easy install file

april 6

before great commit
~/.rebuild/macos vs linux
copy third_party/privworld to great/...

- add db multi process lock
- add a in db lock when a package is being modified to deal with crashes
- twisted might depend on hyperlink

april 7
- get rid of artifact_manager.DEFAULT_PUBLISH_DIR

april 9
- ability to do a step only for a specific system
- ability to load code only for a specific system

april 10
- extra deps like stuff in shell scripts

april 16
- control-c when in the middle of package_tester doesnt interrupt
- hook interface is fucked the abstract method warning doesnt happen if the signature of execute changes.

egg check is either commented out or broken

2018-04-17
 - add check for home directory droppings before and after a build to make sure tools are not crapping stuff there
 - warnings in setup.sh when env dir exists but is empty

2018-05-05
 - need hook tests that both pass and fail
 - value_install_file should be a subclass of value_file
 - retire copy source to dir step
 - support mutliple tarballs like this
       tarball
        macos: sdk-tools-darwin-${REBUILD_PACKAGE_FULL_VERSION}.zip dest=${REBUILD_STAGE_PREFIX_DIR}
        macos: platform-tools-latest-darwin.zip dest=${REBUILD_STAGE_PREFIX_DIR}
        linux: sdk-tools-linux-${REBUILD_PACKAGE_FULL_VERSION}.zip dest=${REBUILD_STAGE_PREFIX_DIR}
        linux: platform-tools-latest-linux.zip dest=${REBUILD_STAGE_PREFIX_DIR}
 - add value_dir class and fix step_patch to use it for patch_dir
 - better error when failing to parse a recipe

2018-05-06
 - gettext subsiutions should be unified with script.substitutions instead of custom
 - any replacements should go through script.substituitions
 - value_base add notion of sources vs tarballs
 - test_recipe_step need a unit tests with substitutions
 - make value_base subclasses be immutable somehow

2018-05-07
 - notion of build "host" might be confusing with the notion of "host" in cross compiling

2018-05-08
 - distinction between value_file and value_file_list in recipes is confusing
 - test_recipe_step needs to test for defaults
 - enhance args_definition to keep track of the origin
 - add hook tests including existing exception


2018-05-15
 - allow '-' in package names and fix everything to match the upstream name starting with java-jdk apache-maven google-cloud-sdk
 - add a REBUILD_PACKAGE_NAME_AND_VERSION var
 
2018-05-16
 - check MANIFEST.in for missing files

2018-05-24
 - rebbe_retry.sh should have tools added to PATH
 - also make it more readable by using variables

018-05-26
 - add unit tests of debug level as well as some tools that require libs and the libs are debug but the tools release
   cause tools are always release
 
2018-05-27
 - add way to depend on compiler like hashing in scons or versioning somehow
 - when gcc is missing on linux issue commands to install it using native package manager
 - add native dependencies for python, compiler, make
 - download and discard tarballs to save diskspace

2018-05-30
 - bes_test rebuild test is broken not sure why

2018-06-06
 - do the linux rpath fix only if the binary in question has libs that need it
when python changed from using libedit to libreadline this error happened add a unit test
rebuild.package.package_manager.PackageFilesConflictError: conflicts found between "libreadline" and "libedit": share/man/man3/history.3
 - make sure sourcing ~/.rebuild/foo/stuff/env/*.sh does so only for dependencies
 - need a unit test that does manager update with something that results in package resolution

2018-06-09
- full unit test for package_descriptor_list
- figure out why shit package_descripttor.parse_requirements is needed.
- package_descriptor.__init__ figure out the correct type for version arg

2018-06-25
- some expensive operations on binaries like strip need to consider hard links
- maybe rename manager to environment
- transform_env name is confusing

2018-07-01
- check all instances of TOOL dependencies and make sure they are not actually BUILD

2018-07-12
- build target should automatically be the host fix that shit.
- distro should always be valid
- change archs to arch

2018-08-04
- add strip_common_ancestor property test for prepare tarballs
- add base property test for prepare tarballs
- maybe organize tests by step and cover all properties

2018-09-14
- fix the stupid distro issues
- tee the rebuilder.py log somewhere that can be tailed

2018-10-02
- add manager test when a package gets removed

2018-10-04
- add a find_tarball cache for storage

2018-10-14
- change build_target to build_profile
- validate build profile args with a platform db
- rename 'manager' to 'reenv' renv reb 
- cleanup build_target/profile command line in all those tools
- FIXME666 arch is fucked for mobile platforms
- manager_cli. get rid of opts
- build_target compute arch from system if none
- build target validation for nonsensical args line no distro and yes version

2018-11-14
- manager_cli system, distro, etc is a mess need to cleanup
- unit_test packages hard codes distro, distro_version

2018-11-21
- determine if recipe "variables" are really needed
- fix package_descriptor to accept version components instead of a string for version

2018-11-23
- test_manager.py has no unit tests

2018-11-24
- change the rebuilder tests in tests/rebuilder from such to something that can be more
inline data drive like fake package.  somehting like fake recipe that parses and writes recipes
and only then forks rebuilder.py.  might be tough

2018-11-27
- when parsing fake recipes checks when nodes are NOT supposed to have children

2018-10-31
- remove need for requests library for file upload
- fix requirements parser to add conditionals for python version somehow
- package_descriptor version shit
- fake_package_recipe.py rename metadata to adesc

2018-11-3
- consider implementing download_only/ingest_only by removing steps instead of by hacking steps to not do stuff
- remove the logic to save checksums out of builder_script
- rebuilder without local soources with --no-net stil ltries to download when wifi is truly down

2018-11-7
- when doing transform env theres no decent assertion of the requested package descriptor is not installed
- add checksuming to downloads

- in step.py env.update(script.substitutions) might happen too early
- env_dir/package_manager env_files test case where there are no files
- addd MANPATH to bes_PATH_ kind of bash funcs also PERL5LIB
- retire shell_env craps all over
- paclage_manager ops like package_env_files() dont check that the packages being requests indeed exists.  need an exception
- requirement_manager could use a cache
s/installation_dir/stuff_dir
- package manager extract tests
- cleanup test pm creation funcs in test_package_manager
- keep the env clean only transform stuff that exists like dont do PKG_CONFIG_PATH unelss theres pc files
- need to figure out way top speed up parsing of recipe files maybe a cache
- rebuilder.py --scratch is messed up it causes ioerrors because of the db
  in addition ... --scratch zlib' causes  KeyError: 'Not found in packages: gnu_m4'

in requirements:
  android: TOOL android_ndk r15c
vs
  android: TOOL android_ndk == r15c
does not cause a syntax error
checksums should only be the recipe for a specific package not all the other ones that share the recipe file

in requirements need to add the notion of arch
  android: TOOL android_foo == 25
vs
  android-arm: TOOL android_foo_arm == 25
  android-x86: TOOL android_foo_x86 == 28
  
in rebuild_sources.py when this happens:
"Failed to verify checksum.  Something went wrong."
the bad target is not removed
its failed 2 times when the upload actually worked

audit rebuild_sources.py to make sure that publish when the checksum is wrong does the right thing
im .project files ass ability to import other projects
consider makeing .project a custom recipe format
maybe need  concept of BUILD_TOOL along with BUILD, RUN, TEST and rename TOOL to RUN_TOOL

maybe change "load" in "recipe" to "python_code" to make it obvious

maybe get git of rebuild_load_env and just use the uber env for simplicity
masked_value_list should inherited from typed_list then fix assert

add a way to comment out mutiple lines
grep for "caca" and cleanup

1. add node to origin
2. change value_base.parse() to use node instead of text
3. value_list_base passes the root node in .parse() need to figure this out

value_git_address, value_file and all should set self.value like everything else
audit all value_base subclassess resolve() to make sure they do the right thing
value_base.resolve() is misnamed should be more like "combine" or somehing better

when parsing recipes add checks that masks are valid all: linux: linux|android: etc
recipe_value.default_value() argument class_name makes no sense its weird
shell_env in python_egg is the wrong name

2018-11-28
 - rebuild_sources.py when publishing do sanity checks on the tarball like gzip -t
 - _unsetup scripts need to unset any variables that were set
   in the env for example in ncurses TERMINFO
 - when a step fails the step name prints as NoneType
 - doing macos: PATH=/poto/bin:$PATH for configure_env in a recipe causes an infinite loop
   because of env variable substitution
 - steps that require external tools should be plugins
 - decide if instructions are needed
 - value_vase._new_parse_simple() deal with the commented out code when the root text
   is missing a colon.  probably *not* needed.

2018-11-29
 - deal with the fact that lib/opencv/rebuild.recipe needs to escape triple quotes.
   the recipe format should have a way to mark strings literal
 - introduce the concept of recipe minor version that gets revved and included in the recipe
   version and thus in the hash to determine if need to rebuild a package if rebuild changes
   in such a way that requires rebuild
 - introduce a hash of the compilation environment in the recipe so if the compiler changes
   need to rebuild
 - do a lot of manual testing of control-c-ing both the manager and builder
 - ~/.rebuild/update.sh should have better feed back for major operations to not give the
   impression its stuck
 - make the 'rebbe' prefix be customizable
 - add a manager command to check the integrity of packages files based on checksums
 - check that integrity after installing and warn the user if it failed
 - test_recipe_step is a bit of mess for the hook tests also the way it makes a str to check the recipe is
   weird and fragile and maybe not deterministic because of white space.  so better to check the structure
   of recipes by turning them into dicts or something
 - need much better configure_flags type of value tests with masks and stuff
 - fix value_error to accept an origin in its ctor instead of so many values
 - value_key_values should use self.value instead of self.values
 - recipe instructions should be put aside
 - theres appears not to be a rebuilder test with an enabled expression

2018-12-01
 - fix env_dir tests on linux
rem_test: FAILED:  rebuild/tests/lib/rebuild/package/test_package_manager.py:test_tools_manager.test_transform_env
rem_test: FAILED:  rebuild/tests/lib/rebuild/recipe/test_recipe_parser_util.py:test_tools_manager.test_transform_env
rem_test: FAILED:  rebuild/tests/lib/rebuild/tools_manager/test_tools_manager.py:test_tools_manager.test_transform_env
 - supprt multiple python_code entries in recipe
 - value_hook parsing doesnt support properties but it should
 - cleanup the logging situation in step.py
 - post_install_hooks should be post_install_hook also figure out the pluraliry of hooks
 - step.call_hooks should be step.call_hook
2018-12-02
 - foo_dev and foo_undev are weird and confusing need better names
 - add remanager tool to visualize env
 - rename remanager already
 - the names for tools dirs are messed up ~/proj/third_party/BUILD/tools/gnu_m4_1_4_18 should be gnu_m4_1.4.18
 - no error when 2 recipes define the same package name
 - ability to import existing rebuild.projects kinda urgent
 - might be nice for tester phase of build to tell what its doing to justify its slowness
 - tarball address for a git module with submodules doesnt work
#      tarball_address
#        all: https://github.com/kubernetes-client/python.git v${REBUILD_PACKAGE_UPSTREAM_VERSION} dest=${REBUILD_BUILD_DIR}
 - jargon: toolset instead of remanager

rebuild_sources.py --pcloud-credentials ~/.pcloud.credentials publish colorama-0.3.9.tar.gz

Delete a source manually and then try to re upload it causes a problem:

Uploading colorama-0.3.9.tar.gz => /sources/c/colorama-0.3.9.tar.gz
File alaready in db something is wrong: c/colorama-0.3.9.tar.gz.

- when there are no requirements or tool requirements
instead of:
     rebuild: java_jdk8 - requirements:
do:
     rebuild: java_jdk8 - requirements (none)

version specification and locking for ~/.rebuild/config

2018-12-04
 - rebuild_sources should have an option for downloading from the web and ingesting that way as well as
   a field in the db for the original url
 - when ingesting a file with the exact same name as an existing file need to throw an error somehow
 - when source finder fails to find an exact tarball it should show possible matches

2018-12-07
 - ingesting step for fetching the original sources from the web
 - maybe rename the artifact_manager staged_artifact_manager or something
 - classes that use class registry need a way to prevent abstract class or otherwise special classes
   from registering
- storage_chain if survives refactor should be a sublass of storage_base
- s/--skip-tests/--no-tests/
- hanged download needs to abort somehow not stall forever
- cmake, gnu_bison try to run java
- python2 pops up a dialog to allow some security thing

2018-12-09
- rebuild_sources.py should remote the remote file if checksum verification fails on ingest
- ressurect storage_git_repo sometime
- get rid of --source-dir and all the places it touches
- retire storage_hard_coded
- retarballing the same bits causes checksum to change need to fix
- when downloading a tarball fails there is no obvious error why that happened
- add a force download option
- theres no sanity check of downloaded checksum for either artifactory or pcloud
- change the sources naming scheme to be explicit instead of using "find"
- only fetch credentials from env when actually needed
- artifact_manager_base abs interface is very screwy with all the extra properties and stuff
  incuding timer, requirement managers and probably more
- in artifact_db operations add, remove, add_or_remove there arent transactions
- remove the rebbe prefix dumbness or make it optional
- search interface in storage is useless let the caller use list_all and search on their own
- credentials split
- fix root_dir vs other root_dir issue in storage.config
- add a check_valid_provider type of method to credentials
  REBUILD_PACKAGE_UPSTREAM_VERSION is a bit too screwy
- dry run rebuild_sources.cli ingest should print the actual final url
- step value properties should be part of the definition or schema or whatever
- source_tarball is more general than that should be named *value*_with_properties or better
- write a unit test for storage.reload_available
- write unit tests for storage_address.make_api_url() and maybe use urljoin
- property escaping
- version of python_future in third_party
- ingestion should work without upload should be 2 steps one just downloads the upstream url the other uploads
- ingestion s/remote_filename/ingested_filename/
- requests timeouts/ progress ?

2018-12-14
- audit .bescfg files and make sure the paths that are getting added are relative to the right places
- script substitutions my be better named variables
- storage checksum interface should include the checksum algorithm or maybe a something that includes both sha1 and sha256


urgent before release 1.0:
s/find_tarball/something_better

- file_search installing package might be a perfomance bottleneck
  better might be to have a list of affected files at package time and then process those only

- no unit test for package_files

other:
 - resolve the export_compilation_flags_requirements dumbness
 - checksum check in package manager is screwy because somettimes files with hardcoded paths get hacked
   which breaks the true checksum test for checking upgradability.  i think i need to get rid of the
   checksum update
 - cleanup stuff not needed from package_file and package_file_list they can be simplified a lot

files_db.py s/package_manifest/package_files
package.py s/package_manifest/files
package_manager.py s/package_manifest/tarball_manifest  s/pkg_desc/tarball_descriptor also dbl check needed
ingest_util.py set_properties is hard coded for artifactory

make adddress interface more abstract and use it for pcloud as well as artifactory
use extended fs attributes - locally - to speed up checksuming on mac and linux

figure out the test situation with stuff like docker picking the system version instead of the packaged one

version both the storage.config file and the projects.config
manager.py __init__() root_dir and config file should not be option.  retire defaults for these
in artifact manager add abstract interface for loading the db.  dont auto load db in artifactory one make it explicit
no unit test for setup_dir in step_python_egg
figure out why tests dont work both in third_party and the other one
figure out a way to share monster sized binaries that have no distro specific bits like java between macos mojave and high sierra.  this might involved adding wildcards to the distro_version
bootstrap scriptage should allow changing the root_dir and fix accordingly
the checksum situation still sucks.
audit all the recipes and consider making setuptools be a BUILD dep not TOOL
_make_storage() kind of funcs are cut-n-paste propagating
allow variables substitution in requirements lists

artifact_manager has 2 very simular and confusing methods list_latest_versions, latest_packages.
add sql sorting magic for uptream versions using hooks to build_version.compare_upstream_version()

when not ingesting still download the url and check the checksum so next time its ready to go
and maybe even make the build work by using the downloaded tarball in the http cache as a source provider

step results should have the notion of error, warning, success and skip
retire tarball_finder
storage: ensure_source is taking in the abs local path which is wrong

find_tarball is storage_local (and maybe other storage impls) gets called a million times when building aspell
018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: filename=a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: AVAILABLE: a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: a/aspell-0.60.6.1.tar.gz found in available files => /Users/restrugo/proj/third_party/BUILD/storage/local/a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: filename=http://ftp.gnu.org/gnu/aspell/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: AVAILABLE: a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: not found in available files: http://ftp.gnu.org/gnu/aspell/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: filename=a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: AVAILABLE: a/aspell-0.60.6.1.tar.gz
2018_12_21-17:53:33-PST [42160.MainThread] (storage_local.DEBUG)  find_tarball: a/aspell-0.60.6.1.tar.gz found in available files => /Users/restrugo/proj/third_party/BUILD/storage/local/a/aspell-0.60.6.1.tar.gz


2018-12-26
- full suite of tests for storage_local

storage_artifactory does not save the cached available.json file

s/rebuild_sources/rebuild_storage/

2018-12-30
recipe: s/descriptor/package_descriptor/ or cleanup the notion that theres a descriptor but separate properties and requirements.  descriptor could be computed out of the others
recipe: add description

2019-01-01
 - empty variable in recipe under variables: causes an exception

urgent stuff:
- simplified storage config
- sharing recipes
- versions for projects
